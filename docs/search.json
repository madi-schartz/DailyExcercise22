[
  {
    "objectID": "DailyExercise22.html",
    "href": "DailyExercise22.html",
    "title": "Daily Excercise 22",
    "section": "",
    "text": "Load in necessary packages\n\nlibrary(dataRetrieval) \n\nWarning: package 'dataRetrieval' was built under R version 4.4.3\n\nlibrary(dplyr)         \n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tsibble)          \n\nWarning: package 'tsibble' was built under R version 4.4.3\n\n\nRegistered S3 method overwritten by 'tsibble':\n  method               from \n  as_tibble.grouped_df dplyr\n\n\n\nAttaching package: 'tsibble'\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, union\n\nlibrary(timetk)         \n\nWarning: package 'timetk' was built under R version 4.4.3\n\nlibrary(modeltime)       \n\nWarning: package 'modeltime' was built under R version 4.4.3\n\nlibrary(prophet)      \n\nWarning: package 'prophet' was built under R version 4.4.3\n\n\nLoading required package: Rcpp\n\n\nLoading required package: rlang\n\nlibrary(fable)        \n\nWarning: package 'fable' was built under R version 4.4.3\n\n\nLoading required package: fabletools\n\n\nWarning: package 'fabletools' was built under R version 4.4.3\n\nlibrary(fable.prophet)    \n\nWarning: package 'fable.prophet' was built under R version 4.4.3\n\n\n\nAttaching package: 'fable.prophet'\n\n\nThe following object is masked from 'package:prophet':\n\n    prophet\n\nlibrary(ggplot2)        \nlibrary(lubridate)\n\nWarning: package 'lubridate' was built under R version 4.4.3\n\n\n\nAttaching package: 'lubridate'\n\n\nThe following object is masked from 'package:tsibble':\n\n    interval\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\nlibrary(tidymodels)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n\n\n✔ broom        1.0.7     ✔ rsample      1.2.1\n✔ dials        1.3.0     ✔ tibble       3.2.1\n✔ infer        1.0.7     ✔ tidyr        1.3.1\n✔ modeldata    1.4.0     ✔ tune         1.2.1\n✔ parsnip      1.2.1     ✔ workflows    1.1.4\n✔ purrr        1.0.2     ✔ workflowsets 1.1.0\n✔ recipes      1.1.1     ✔ yardstick    1.3.2\n\n\nWarning: package 'recipes' was built under R version 4.4.3\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::%@%()          masks rlang::%@%()\n✖ yardstick::accuracy() masks fabletools::accuracy()\n✖ purrr::discard()      masks scales::discard()\n✖ dplyr::filter()       masks stats::filter()\n✖ purrr::flatten()      masks rlang::flatten()\n✖ purrr::flatten_chr()  masks rlang::flatten_chr()\n✖ purrr::flatten_dbl()  masks rlang::flatten_dbl()\n✖ purrr::flatten_int()  masks rlang::flatten_int()\n✖ purrr::flatten_lgl()  masks rlang::flatten_lgl()\n✖ purrr::flatten_raw()  masks rlang::flatten_raw()\n✖ infer::generate()     masks fabletools::generate()\n✖ infer::hypothesize()  masks fabletools::hypothesize()\n✖ purrr::invoke()       masks rlang::invoke()\n✖ dplyr::lag()          masks stats::lag()\n✖ parsnip::null_model() masks fabletools::null_model()\n✖ rsample::populate()   masks Rcpp::populate()\n✖ purrr::splice()       masks rlang::splice()\n✖ recipes::step()       masks stats::step()\n• Dig deeper into tidy modeling with R at https://www.tmwr.org\n\n\n\n\nDownload streamflow data from USGS (from assignment 21)\n\n# Example: Cache la Poudre River at Mouth (USGS site 06752260)\npoudre_flow &lt;- readNWISdv(siteNumber = \"06752260\",    # Download data from USGS for site 06752260\n                          parameterCd = \"00060\",      # Parameter code 00060 = discharge in cfs)\n                          startDate = \"2013-01-01\",   # Set the start date\n                          endDate = \"2023-12-31\") |&gt;  # Set the end date\n  renameNWISColumns() |&gt;                              # Rename columns to standard names (e.g., \"Flow\", \"Date\")\n  mutate(Date = as_date(Date),\n         Date = floor_date(Date, \"month\")) |&gt;                   # Convert daily Date values into a year-month format (e.g., \"2023 Jan\")\n  group_by(Date) |&gt;                                   # Group the data by the new monthly Date\n  summarise(Flow = mean(Flow),\n            .groups = \"drop\")                       # Calculate the average daily flow for each month\n\nGET:https://waterservices.usgs.gov/nwis/dv/?site=06752260&format=waterml%2C1.1&ParameterCd=00060&StatCd=00003&startDT=2013-01-01&endDT=2023-12-31\n\n# Convert to tsibble\npoudre_ts &lt;- poudre_flow %&gt;%\n  as_tsibble(index = Date)\n\npoudre_ts\n\n# A tsibble: 132 x 2 [1D]\n   Date          Flow\n   &lt;date&gt;       &lt;dbl&gt;\n 1 2013-01-01   18.1 \n 2 2013-02-01   18.0 \n 3 2013-03-01    8.21\n 4 2013-04-01    5.94\n 5 2013-05-01  333.  \n 6 2013-06-01  300.  \n 7 2013-07-01   75.6 \n 8 2013-08-01   48.8 \n 9 2013-09-01 1085.  \n10 2013-10-01  146.  \n# ℹ 122 more rows\n\n# Plotting the time series\nlibrary(ggplot2)\nlibrary(plotly)\n\nWarning: package 'plotly' was built under R version 4.4.3\n\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\nflowplot &lt;- ggplot(poudre_ts, aes(x = Date, y = Flow)) +\n  geom_line() +\n  labs(title = \"Monthly Mean Discharge\\nCache la Poudre River (2013–2023)\",\n       x = \"Year‑Month\", y = \"Discharge (cfs)\")\n\nprint(flowplot)\n\n\n\n\n\n\n\nggplotly(flowplot)\n\n\n\n\n\n\n\nSpecify and Fit Prophet and Arima Models\n\nmods &lt;- list(\n  prophet_reg() %&gt;%\n    set_engine(\"prophet\"),\n  arima_reg() %&gt;% \n    set_engine(\"auto_arima\")\n)\n\nmodels &lt;- map(mods, ~ fit(.x, Flow ~ Date, data = poudre_ts))\n\nDisabling weekly seasonality. Run prophet with weekly.seasonality=TRUE to override this.\n\n\nDisabling daily seasonality. Run prophet with daily.seasonality=TRUE to override this.\n\n\nfrequency = 12 observations per 1 year\n\nmodels_tbl &lt;- as_modeltime_table(models)\n\n\n\nForecast next 12 months\n\nfuture_tbl &lt;- poudre_ts %&gt;% future_frame(Date, .length_out = \"12 months\")\n\nforecast_tbl &lt;- models_tbl %&gt;%\n  modeltime_forecast(\n    new_data    = future_tbl,\n    actual_data = poudre_ts\n  ) %&gt;%\n  filter(.key == \"prediction\") %&gt;%\n  select(.model_id, Date = .index, Predicted = .value)\n\nError: Column `Date` (index) must not contain `NA`.\n\n\nWarning: Unknown or uninitialised column: `.key`.\n\n\n\n\nDownload daily streamflow for the next 12 months and aggregate this data to monthly averages\n\nobs_2024 &lt;- readNWISdv(\n    siteNumber  = \"06752260\",\n    parameterCd = \"00060\",\n    startDate   = \"2024-01-01\",\n    endDate     = \"2024-12-31\"\n  ) %&gt;%\n  renameNWISColumns() %&gt;%\n  mutate(\n    Date = as_date(Date),\n    Date = floor_date(Date, \"month\")\n  ) %&gt;%\n  group_by(Date) %&gt;%\n  summarise(Observed = mean(Flow, na.rm = TRUE), .groups = \"drop\")\n\nGET:https://waterservices.usgs.gov/nwis/dv/?site=06752260&format=waterml%2C1.1&ParameterCd=00060&StatCd=00003&startDT=2024-01-01&endDT=2024-12-31\n\n\n\n\nCompute the R2 Values\n\ncompare_tbl &lt;- forecast_tbl %&gt;%\n  left_join(obs_2024, by = \"Date\")\n\nr2_val &lt;- summary(lm(Observed ~ Predicted, data = compare_tbl))$r.squared\ncat(\"R² = \", round(r2_val, 3),\n    \" → \", round(r2_val * 100, 1),\n    \"% of observed monthly variance explained by the forecasts.\\n\", sep = \"\")\n\nR² = 0.919 → 91.9% of observed monthly variance explained by the forecasts.\n\n# The R-squared value tells us what proportion of variance between variables can be explained by the forecasts. This model has a R-squared value of around 92% which shows us that there is strong explanatory power as it explains 92% of month-to-month variability in the observed 2024 flows very accurately. \n\n\n\nPredicted vs Observed Values\n\nggplot(compare_tbl, aes(x = Predicted, y = Observed, color = factor(.model_id))) +\n  geom_point(color= \"darkblue\", size = 2) +\n  geom_abline(slope = 1, intercept = 0, linetype = \"dashed\") +  # 1:1 line\n  geom_smooth(color= \"pink\",method = \"lm\", se = FALSE) +                      # fit line\n  labs(\n    title    = \" 2024 Forecasted vs Observed Monthly Flow\",\n    subtitle = paste0(\"Models (IDs) & R² = \", round(r2_val, 3)),\n    x        = \"Forecasted Mean (cfs)\",\n    y        = \"Observed Mean (cfs)\",\n    color    = \"Model\\nID\"\n  ) +\n  theme_minimal()\n\n`geom_smooth()` using formula = 'y ~ x'"
  }
]